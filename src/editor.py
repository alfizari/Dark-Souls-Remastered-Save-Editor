import json
import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from ds2unpackercopy import encrypt_modified_files, decrypt_ds2_sl2
from ds2unpackercopyimport import decrypt_ds2_sl2_import


#Health=0x60
#stanimna=0x7c
magic_pattern='00 FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF'
souls_distance = -291
ng_distance= +0x1E3A7
health_distance=-419 # + 4 + 4 
stamina_distance=-391# + 4 + 4
hex_pattern_ng=magic_pattern
all_items="A0 BB 0D 00 01 00 00 00 40 80 B9 2A 01 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00 20 3C 03 00 01 00 00 00 41 40 65 05 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 A0 BB 0D 00 01 00 00 00 42 80 B9 2A 01 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00 A0 BB 0D 00 01 00 00 00 43 80 B9 2A 01 00 00 00 05 00 00 00 00 00 00 00 00 00 00 10 A0 BB 0D 00 01 00 00 00 44 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 10 7A 07 00 01 00 00 00 45 40 71 03 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 F8 7D 07 00 01 00 00 00 46 80 77 03 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 E0 81 07 00 01 00 00 00 47 C0 7D 03 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 40 88 13 00 00 01 00 00 00 48 90 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 67 00 00 00 01 00 00 00 A9 40 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 75 00 00 00 01 00 00 00 4A E0 06 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 88 BF 0D 00 01 00 00 00 4B 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 5C 15 00 01 00 00 00 4C 40 2D 38 01 00 00 00 A0 00 00 00 06 00 00 00 00 00 00 00 E8 38 0C 00 01 00 00 00 4D 40 CF 1D 01 00 00 00 F5 00 00 00 01 00 00 00 00 00 00 40 C9 00 00 00 05 00 00 00 B8 F0 04 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8 18 03 00 01 00 00 00 4F C0 26 05 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 68 C4 14 00 01 00 00 00 50 80 25 32 01 00 00 00 32 00 00 00 00 00 00 00 00 00 00 40 F4 01 00 00 4B 00 00 00 D0 E0 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 BC 02 00 00 63 00 00 00 C3 70 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 70 C3 0D 00 01 00 00 00 53 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 58 C7 0D 00 01 00 00 00 54 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 C8 85 07 00 01 00 00 00 55 00 84 03 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 C0 D4 01 00 01 00 00 00 56 C0 58 05 01 00 00 00 20 03 00 00 00 00 00 00 00 00 00 10 A8 D8 01 00 01 00 00 00 57 00 5F 05 01 00 00 00 20 03 00 00 00 00 00 00 00 00 00 10 90 DC 01 00 01 00 00 00 58 40 65 05 01 00 00 00 20 03 00 00 00 00 00 00 00 00 00 10 78 E0 01 00 01 00 00 00 59 80 6B 05 01 00 00 00 20 03 00 00 00 00 00 00 00 00 00 10 50 34 03 00 01 00 00 00 62 40 06 00 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 38 38 03 00 01 00 00 00 63 80 0C 00 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 20 3C 03 00 01 00 00 00 64 C0 12 00 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 08 40 03 00 01 00 00 00 65 00 19 00 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 10 98 02 00 01 00 00 00 82 40 1F 00 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 F8 9B 02 00 01 00 00 00 83 80 25 00 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 E0 9F 02 00 01 00 00 00 84 C0 2B 00 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 C8 A3 02 00 01 00 00 00 85 00 32 00 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 70 F3 05 00 01 00 00 00 5D 40 38 00 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 58 F7 05 00 01 00 00 00 5E 80 3E 00 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 40 FB 05 00 01 00 00 00 5F C0 44 00 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 28 FF 05 00 01 00 00 00 60 00 4B 00 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 20 30 05 00 01 00 00 00 66 40 45 02 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 08 34 05 00 01 00 00 00 67 80 64 02 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 F0 37 05 00 01 00 00 00 68 C0 6A 02 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 D8 3B 05 00 01 00 00 00 69 00 71 02 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 D0 6C 04 00 01 00 00 00 6A C0 A3 05 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 B8 70 04 00 01 00 00 00 6B 00 AA 05 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 A0 74 04 00 01 00 00 00 6C 40 B0 05 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 88 78 04 00 01 00 00 00 6D 80 B6 05 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 20 73 00 00 00 01 00 00 00 6E 00 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 6D 00 00 00 01 00 00 00 6F 90 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 93 00 00 00 01 00 00 00 70 D0 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 67 00 00 00 01 00 00 00 71 50 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 68 00 00 00 01 00 00 00 72 20 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 8A 00 00 00 01 00 00 00 73 20 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 79 00 00 00 01 00 00 00 74 00 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 7A 00 00 00 01 00 00 00 75 10 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 71 00 00 00 01 00 00 00 76 B0 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 66 00 00 00 01 00 00 00 77 70 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 95 00 00 00 01 00 00 00 78 50 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 80 00 00 00 01 00 00 00 79 E0 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 74 00 00 00 01 00 00 00 7A 30 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 91 00 00 00 01 00 00 00 7B D0 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 69 00 00 00 01 00 00 00 7C 60 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 64 00 00 00 01 00 00 00 7D 30 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 77 00 00 00 01 00 00 00 7E B0 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 75 00 00 00 01 00 00 00 7F C0 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 90 00 00 00 01 00 00 00 80 90 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 8D 00 00 00 01 00 00 00 81 10 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 89 00 00 00 01 00 00 00 82 40 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 8B 00 00 00 01 00 00 00 83 30 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 6E 00 00 00 01 00 00 00 84 A0 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 7F 00 00 00 01 00 00 00 85 F0 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 65 00 00 00 01 00 00 00 86 C0 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 8F 00 00 00 01 00 00 00 87 70 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 8F 00 00 00 01 00 00 00 88 70 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 7C 00 00 00 01 00 00 00 89 60 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 7E 00 00 00 01 00 00 00 8A E0 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 78 00 00 00 01 00 00 00 8B 40 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 94 00 00 00 01 00 00 00 8C 60 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 8E 00 00 00 01 00 00 00 8D 80 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 82 00 00 00 01 00 00 00 8E 80 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 7D 00 00 00 01 00 00 00 8F F0 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 7B 00 00 00 01 00 00 00 90 20 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 6C 00 00 00 01 00 00 00 91 80 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 6B 00 00 00 01 00 00 00 92 50 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 6A 00 00 00 01 00 00 00 93 70 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 6F 00 00 00 01 00 00 00 94 10 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 72 00 00 00 01 00 00 00 95 40 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 92 00 00 00 01 00 00 00 96 A0 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 9B 1E 00 E7 03 00 00 97 40 18 7A 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 84 1E 00 E7 03 00 00 98 80 1E 7A 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 68 88 1E 00 E7 03 00 00 99 C0 24 7A 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 8C 1E 00 E7 03 00 00 9A 00 2B 7A 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 38 90 1E 00 E7 03 00 00 9B 40 31 7A 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 94 1E 00 E7 03 00 00 9C 80 37 7A 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08 98 1E 00 E7 03 00 00 9D C0 3D 7A 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 D8 9F 1E 00 E7 03 00 00 9E 00 44 7A 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 A3 1E 00 E7 03 00 00 9F 40 4A 7A 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 D8 16 20 00 E7 03 00 00 A0 C0 50 7B 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 0B 20 00 E7 03 00 00 A1 00 57 7B 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08 0F 20 00 E7 03 00 00 A2 40 5D 7B 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 1A 20 00 E7 03 00 00 A3 C0 69 7B 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 12 20 00 E7 03 00 00 A4 80 63 7B 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 0E 01 00 00 63 00 00 00 AB C0 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 10 01 00 00 63 00 00 00 AC D0 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 F0 00 00 00 63 00 00 00 AD 00 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 13 01 00 00 63 00 00 00 AF F0 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 04 01 00 00 63 00 00 00 A7 B0 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 12 01 00 00 63 00 00 00 AE E0 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 24 01 00 00 62 00 00 00 CC 10 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 29 01 00 00 63 00 00 00 B0 20 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 25 01 00 00 63 00 00 00 C9 50 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 22 01 00 00 63 00 00 00 B1 30 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 23 01 00 00 63 00 00 00 B2 40 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 36 01 00 00 63 00 00 00 C8 80 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 37 01 00 00 63 00 00 00 B1 30 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 39 01 00 00 63 00 00 00 CB 90 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 86 01 00 00 01 00 00 00 B3 70 06 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 87 01 00 00 01 00 00 00 B9 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 88 01 00 00 01 00 00 00 BC 10 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 89 01 00 00 01 00 00 00 52 20 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 8A 01 00 00 01 00 00 00 BE 30 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 8B 01 00 00 01 00 00 00 BF 40 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 8C 01 00 00 01 00 00 00 C0 50 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 99 01 00 00 63 00 00 00 B7 E0 04 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 98 01 00 00 63 00 00 00 BB 90 04 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 C1 02 00 00 63 00 00 00 C2 60 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 88 BF 0D 00 01 00 00 00 BD C0 BF 2A 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 40 BF 02 00 00 63 00 00 00 C1 80 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 C0 02 00 00 63 00 00 00 3E 91 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 C2 02 00 00 63 00 00 00 40 A1 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 C3 02 00 00 63 00 00 00 51 50 06 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 BD 02 00 00 63 00 00 00 3F B1 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 C4 02 00 00 63 00 00 00 C4 C0 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 BE 02 00 00 62 00 00 00 51 50 06 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 26 01 00 00 63 00 00 00 52 10 04 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 73 01 00 00 01 00 00 00 B4 B0 04 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 6F 00 00 00 63 00 00 00 A5 60 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 4A 01 00 00 63 00 00 00 BB 90 04 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 28 01 00 00 63 00 00 00 C6 F0 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 78 01 00 00 63 00 00 00 CA 80 06 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 72 01 00 00 63 00 00 00 BA A0 04 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 18 01 00 00 63 00 00 00 CE 70 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 7C 01 00 00 63 00 00 00 CD A0 06 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 38 01 00 00 63 00 00 00 2B 11 04 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 F5 01 00 00 63 00 00 00 CF 60 06 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 6D 00 00 00 63 00 00 00 AA 90 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 76 01 00 00 63 00 00 00 A6 80 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 77 01 00 00 62 00 00 00 3D 51 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 E8 03 00 00 63 00 00 00 D3 90 3E 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 06 04 00 00 63 00 00 00 D4 B0 3E 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 2E 04 00 00 63 00 00 00 D5 C0 3E 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 F2 03 00 00 63 00 00 00 D6 A0 3E 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 FC 03 00 00 63 00 00 00 D7 D0 3E 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 10 04 00 00 63 00 00 00 D8 E0 3E 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 38 04 00 00 63 00 00 00 D9 F0 3E 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 1A 04 00 00 63 00 00 00 DA 20 3F 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 42 04 00 00 63 00 00 00 DB 30 3F 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 24 04 00 00 63 00 00 00 DC 00 3F 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 4C 04 00 00 63 00 00 00 DD 10 3F 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 6A 04 00 00 63 00 00 00 DE 40 3F 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 60 04 00 00 63 00 00 00 DF 50 3F 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 56 04 00 00 63 00 00 00 E0 60 3F 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 70 C3 0D 00 01 00 00 00 E1 40 FE 2A 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 00 10 5C 0C 00 01 00 00 00 E2 40 C9 1E 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 00 00 35 0C 00 01 00 00 00 E3 C0 13 1D 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 00 D0 3C 0C 00 01 00 00 00 E4 C0 0D 1E 01 00 00 00 B4 00 00 00 00 00 00 00 00 00 00 00 A0 44 0C 00 01 00 00 00 E5 C0 8A 1E 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 00 28 58 0C 00 01 00 00 00 E6 40 52 1D 01 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 B8 40 0C 00 01 00 00 00 E7 40 4C 1E 01 00 00 00 DC 00 00 00 00 00 00 00 00 00 00 00 20 00 0D 00 01 00 00 00 E8 40 40 20 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 00 50 F8 0C 00 01 00 00 00 E9 C0 01 20 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 00 D8 0B 0D 00 01 00 00 00 EA 40 C3 1F 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 00 48 B2 0A 00 01 00 00 00 EB C0 AE 18 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 00 18 BA 0A 00 01 00 00 00 EC 40 ED 18 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 00 E8 C1 0A 00 01 00 00 00 ED C0 2B 19 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 00 60 AE 0A 00 01 00 00 00 EE 40 70 18 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 00 98 75 0B 00 01 00 00 00 EF C0 1F 1B 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 00 B0 71 0B 00 01 00 00 00 F0 40 E1 1A 01 00 00 00 E6 00 00 00 00 00 00 00 00 00 00 00 58 92 01 00 01 00 00 00 F1 40 83 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 A0 86 01 00 01 00 00 00 F2 40 06 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 88 8A 01 00 01 00 00 00 F3 C0 44 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 90 2F 09 00 01 00 00 00 F4 40 7C 16 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 00 C0 27 09 00 01 00 00 00 F5 40 FF 15 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 A8 2B 09 00 01 00 00 00 F6 C0 3D 16 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 00 60 37 09 00 01 00 00 00 F7 C0 BA 16 01 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 E0 1C 03 00 01 00 00 00 F8 C0 32 03 01 00 00 00 78 00 00 00 00 00 00 00 00 00 00 00 98 28 03 00 01 00 00 00 F9 C0 2C 04 01 00 00 00 A0 00 00 00 00 00 00 00 00 00 00 00 10 15 03 00 01 00 00 00 FA 40 F4 02 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 28 11 03 00 01 00 00 00 FB C0 B5 02 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 40 0D 03 00 01 00 00 00 FC 40 77 02 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 B0 24 03 00 01 00 00 00 FD 40 71 03 01 00 00 00 F0 00 00 00 00 00 00 00 00 00 00 00 E0 93 04 00 01 00 00 00 FE 40 59 07 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 C8 97 04 00 01 00 00 00 FF C0 97 07 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 98 9F 04 00 01 00 00 00 00 C1 14 08 01 00 00 00 A0 00 00 00 00 00 00 00 00 00 00 00 B0 9B 04 00 01 00 00 00 01 41 D6 07 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 00 00 5F 05 00 01 00 00 00 02 41 B8 0C 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 00 18 5B 05 00 01 00 00 00 03 41 3B 0C 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 30 57 05 00 01 00 00 00 04 C1 79 0C 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 F0 A8 07 00 01 00 00 00 05 C1 CC 13 01 00 00 00 50 00 00 00 00 00 00 00 00 00 00 00 20 A1 07 00 01 00 00 00 06 41 8E 13 01 00 00 00 50 00 00 00 00 00 00 00 00 00 00 00 08 A5 07 00 01 00 00 00 07 41 0B 14 01 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 68 1E 06 00 01 00 00 00 08 C1 EA 0E 01 00 00 00 A0 00 00 00 00 00 00 00 00 00 00 00 08 2E 06 00 01 00 00 00 09 C1 67 0F 01 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 80 1A 06 00 01 00 00 00 0A 41 AC 0E 01 00 00 00 A0 00 00 00 00 00 00 00 00 00 00 00 50 22 06 00 01 00 00 00 0B 41 29 0F 01 00 00 00 78 00 00 00 00 00 00 00 00 00 00 00 B8 E1 06 00 01 00 00 00 0C 41 1D 11 01 00 00 00 B4 00 00 00 00 00 00 00 00 00 00 00 D0 DD 06 00 01 00 00 00 0D C1 5B 11 01 00 00 00 8C 00 00 00 00 00 00 00 00 00 00 00 10 4A 0F 00 01 00 00 00 0E 41 B1 22 01 00 00 00 A0 00 00 00 00 00 00 00 00 00 00 00 90 05 10 00 01 00 00 00 0F 41 2E 23 01 00 00 00 B4 00 00 00 00 00 00 00 00 00 00 00 40 42 0F 00 01 00 00 00 10 41 34 22 01 00 00 00 B4 00 00 00 00 00 00 00 00 00 00 00 28 46 0F 00 01 00 00 00 11 C1 72 22 01 00 00 00 8C 00 00 00 00 00 00 00 00 00 00 00 98 D4 10 00 01 00 00 00 12 C1 60 25 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 30 8C 11 00 01 00 00 00 13 41 16 27 01 00 00 00 82 00 00 00 00 00 00 00 00 00 00 00 E0 C8 10 00 01 00 00 00 14 41 A5 24 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 38 E4 10 00 01 00 00 00 15 41 22 25 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 00 50 57 12 00 01 00 00 00 16 C1 B3 2C 01 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 20 5F 12 00 01 00 00 00 17 C1 36 2C 01 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 68 53 12 00 01 00 00 00 18 41 75 2C 01 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 80 4F 12 00 01 00 00 00 19 41 F8 2B 01 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 A0 1A 13 00 01 00 00 00 1A C1 24 2F 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 00 B8 16 13 00 01 00 00 00 1B C1 A7 2E 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 00 D0 12 13 00 01 00 00 00 1C 41 69 2E 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 00 88 1E 13 00 01 00 00 00 1D 41 E6 2E 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 00 E8 6D 18 00 01 00 00 00 1E C1 C5 29 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 00 6A 18 00 01 00 00 00 1F 41 87 29 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 48 70 15 00 01 00 00 00 20 C1 00 35 01 00 00 00 8C 00 00 00 00 00 00 00 00 00 00 00 D0 83 15 00 01 00 00 00 21 C1 89 33 01 00 00 00 B4 00 00 00 00 00 00 00 00 00 00 00 30 74 15 00 01 00 00 00 22 41 13 34 01 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 40 54 89 00 01 00 00 00 23 41 C8 33 01 00 00 00 B4 00 00 00 00 00 00 00 00 00 00 00 00 7C 15 00 01 00 00 00 24 41 C2 34 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 E8 7F 15 00 01 00 00 00 25 41 45 34 01 00 00 00 78 00 00 00 00 00 00 00 00 00 00 00 A0 85 16 00 01 00 00 00 26 C1 ED 33 01 00 00 00 B4 00 00 00 00 00 00 00 00 00 00 00 78 68 15 00 01 00 00 00 27 C1 83 34 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 60 6C 15 00 01 00 00 00 28 41 3F 35 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 00 20 47 16 00 01 00 00 00 29 41 4B 33 01 00 00 00 B4 00 00 00 00 00 00 00 00 00 00 00 98 33 16 00 01 00 00 00 2A C1 2D 3A 01 00 00 00 DA 00 00 00 06 00 00 00 00 00 00 40 7C 15 00 00 01 00 00 00 2B A1 BF 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 6E 16 00 01 00 00 00 2C 41 98 3B 01 00 00 00 A0 00 00 00 00 00 00 00 00 00 00 00 B8 81 16 00 01 00 00 00 2D C1 59 3B 01 00 00 00 B4 00 00 00 00 00 00 00 00 00 00 00 50 4B 14 00 01 00 00 00 2E C1 95 31 01 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 08 DA 13 00 01 00 00 00 2F 81 E0 30 01 00 00 00 5A 00 00 00 00 00 00 00 00 00 00 00 78 F1 13 00 01 00 00 00 30 81 F9 30 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 00 60 F5 13 00 01 00 00 00 31 C1 FF 30 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 00 D8 E1 13 00 01 00 00 00 32 C1 E6 30 01 00 00 00 5A 00 00 00 00 00 00 00 00 00 00 00 A8 E9 13 00 01 00 00 00 33 01 ED 30 01 00 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 20 D6 13 00 01 00 00 00 34 41 DA 30 01 00 00 00 5A 00 00 00 00 00 00 00 00 00 00 00 F0 DD 13 00 01 00 00 00 35 01 06 31 01 00 00 00 A0 00 00 00 00 00 00 00 00 00 00 00 90 ED 13 00 01 00 00 00 36 41 0C 31 01 00 00 00 5A 00 00 00 00 00 00 00 00 00 00 00 38 CC 14 00 01 00 00 00 37 01 32 32 01 00 00 00 32 00 00 00 00 00 00 00 00 00 00 00 08 D4 14 00 01 00 00 00 38 81 3E 32 01 00 00 00 32 00 00 00 00 00 00 00 00 00 00 00 80 C0 14 00 01 00 00 00 39 41 1F 32 01 00 00 00 32 00 00 00 00 00 00 00 00 00 00 00 50 C8 14 00 01 00 00 00 3A C1 2B 32 01 00 00 00 32 00 00 00 00 00 00 00 00 00 00 00 D8 DB 14 00 01 00 00 00 3B 01 4B 32 01 00 00 00 32 00 00 00 00 00 00 00 00 00 00 20 96 00 00 00 01 00 00 00 3C 91 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 E6 00 00 00 63 00 00 00 A8 A0 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 C5 02 00 00 63 00 00 00 51 50 06 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 C7 02 00 00 63 00 00 00 51 50 06 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 C6 02 00 00 63 00 00 00 51 50 06 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 50 34 03 00 01 00 00 00 41 41 EE 03 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 78 9E 89 00 01 00 00 00 42 41 04 2A 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 50 87 0A 00 01 00 00 00 43 C1 71 05 01 00 00 00 20 03 00 00 00 00 00 00 00 00 00 10 38 8B 0A 00 01 00 00 00 44 01 78 05 01 00 00 00 20 03 00 00 00 00 00 00 00 00 00 10 38 8B 0A 00 01 00 00 00 45 01 78 05 01 00 00 00 20 03 00 00 00 00 00 00 00 00 00 10 20 8F 0A 00 01 00 00 00 46 41 7E 05 01 00 00 00 20 03 00 00 00 00 00 00 00 00 00 10 08 93 0A 00 01 00 00 00 47 81 84 05 01 00 00 00 20 03 00 00 00 00 00 00 00 00 00 10 30 39 0A 00 01 00 00 00 48 C1 A9 04 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 18 3D 0A 00 01 00 00 00 49 01 B0 04 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 00 41 0A 00 01 00 00 00 4A 41 B6 04 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 E8 44 0A 00 01 00 00 00 4B 81 BC 04 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 40 60 0A 00 01 00 00 00 4C C1 90 04 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 28 64 0A 00 01 00 00 00 4D 01 97 04 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 10 68 0A 00 01 00 00 00 4E 41 9D 04 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 F8 6B 0A 00 01 00 00 00 4F 81 A3 04 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 20 12 0A 00 01 00 00 00 50 C1 77 04 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 08 16 0A 00 01 00 00 00 51 01 7E 04 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 F0 19 0A 00 01 00 00 00 52 41 84 04 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 D8 1D 0A 00 01 00 00 00 53 81 8A 04 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 48 B2 0A 00 01 00 00 00 54 81 AF 02 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 30 B6 0A 00 01 00 00 00 55 C1 B5 02 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 18 BA 0A 00 01 00 00 00 56 01 BC 02 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 60 AE 0A 00 01 00 00 00 57 41 A9 02 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 A0 D9 08 00 01 00 00 00 58 81 CF 05 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 80 8B 08 00 01 00 00 00 59 C1 D5 05 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 30 E6 02 00 01 00 00 00 5A 01 DC 05 01 00 00 00 50 00 00 00 00 00 00 00 00 00 00 10 E0 75 09 00 01 00 00 00 5B 41 20 04 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 F0 9C 09 00 01 00 00 00 5C 81 26 04 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 B0 00 09 00 01 00 00 00 5D C1 BC 05 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 C0 27 09 00 01 00 00 00 5E 01 C3 05 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 D0 4E 09 00 01 00 00 00 5F 41 C9 05 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 30 57 05 00 01 00 00 00 56 40 51 00 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 18 5B 05 00 01 00 00 00 57 80 57 00 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 00 5F 05 00 01 00 00 00 58 C0 5D 00 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 E8 62 05 00 01 00 00 00 59 00 64 00 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 40 7E 05 00 01 00 00 00 5E 40 6A 00 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 28 82 05 00 01 00 00 00 5F 80 70 00 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 10 86 05 00 01 00 00 00 60 C0 76 00 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 F8 89 05 00 01 00 00 00 61 00 7D 00 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 E0 93 04 00 01 00 00 00 5A 40 83 00 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 C8 97 04 00 01 00 00 00 5B 80 89 00 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 B0 9B 04 00 01 00 00 00 5C C0 8F 00 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 98 9F 04 00 01 00 00 00 5D 00 96 00 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 50 C3 00 00 01 00 00 00 61 40 9C 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 38 C7 00 00 01 00 00 00 62 80 A2 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 20 CB 00 00 01 00 00 00 63 C0 A8 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 08 CF 00 00 01 00 00 00 64 00 AF 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 68 AD 03 00 01 00 00 00 56 40 B5 00 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 50 B1 03 00 01 00 00 00 57 80 BB 00 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 38 B5 03 00 01 00 00 00 58 C0 C1 00 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 60 5B 03 00 01 00 00 00 66 00 C8 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 48 5F 03 00 01 00 00 00 67 40 CE 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 30 63 03 00 01 00 00 00 68 80 D4 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 18 67 03 00 01 00 00 00 69 C0 DA 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 00 C4 09 00 01 00 00 00 76 00 E1 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 E8 C7 09 00 01 00 00 00 77 40 E7 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 D0 CB 09 00 01 00 00 00 78 80 ED 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 B8 CF 09 00 01 00 00 00 79 C0 F3 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 50 A5 05 00 01 00 00 00 61 00 FA 00 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 38 A9 05 00 01 00 00 00 62 40 00 01 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 20 AD 05 00 01 00 00 00 63 80 06 01 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 08 B1 05 00 01 00 00 00 64 C0 0C 01 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 70 82 03 00 01 00 00 00 79 00 13 01 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 58 86 03 00 01 00 00 00 7A 40 19 01 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 40 8A 03 00 01 00 00 00 7B 80 1F 01 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 28 8E 03 00 01 00 00 00 7C C0 25 01 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 D8 BE 04 00 01 00 00 00 45 40 32 01 01 00 00 00 5E 01 00 00 00 00 00 00 00 00 00 10 C0 C2 04 00 01 00 00 00 67 80 38 01 01 00 00 00 5E 01 00 00 00 00 00 00 00 00 00 10 A8 C6 04 00 01 00 00 00 47 C0 3E 01 01 00 00 00 5E 01 00 00 00 00 00 00 00 00 00 10 20 BF 02 00 01 00 00 00 86 00 45 01 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 08 C3 02 00 01 00 00 00 87 40 4B 01 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 F0 C6 02 00 01 00 00 00 88 80 51 01 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 D8 CA 02 00 01 00 00 00 89 C0 57 01 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 10 EB 09 00 01 00 00 00 45 00 5E 01 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 F8 EE 09 00 01 00 00 00 46 40 64 01 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 E0 F2 09 00 01 00 00 00 47 80 6A 01 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 C8 F6 09 00 01 00 00 00 55 C0 70 01 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 00 71 02 00 01 00 00 00 59 00 77 01 01 00 00 00 5E 01 00 00 00 00 00 00 00 00 00 10 E8 74 02 00 01 00 00 00 5A 40 7D 01 01 00 00 00 5E 01 00 00 00 00 00 00 00 00 00 10 D0 78 02 00 01 00 00 00 5B 80 83 01 01 00 00 00 5E 01 00 00 00 00 00 00 00 00 00 10 B8 7C 02 00 01 00 00 00 5C C0 89 01 01 00 00 00 5E 01 00 00 00 00 00 00 00 00 00 10 70 11 01 00 01 00 00 00 6A 00 90 01 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 58 15 01 00 01 00 00 00 6B 40 96 01 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 40 19 01 00 01 00 00 00 6C 80 9C 01 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 28 1D 01 00 01 00 00 00 6D C0 A2 01 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 B0 AD 01 00 01 00 00 00 55 00 A9 01 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 98 B1 01 00 01 00 00 00 56 40 AF 01 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 80 B5 01 00 01 00 00 00 57 80 B5 01 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 68 B9 01 00 01 00 00 00 58 C0 BB 01 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 10 27 00 00 01 00 00 00 7E 00 C2 01 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 F8 2A 00 00 01 00 00 00 7F 40 C8 01 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 E0 2E 00 00 01 00 00 00 80 80 CE 01 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 C8 32 00 00 01 00 00 00 81 C0 D4 01 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 D0 FB 01 00 01 00 00 00 8E 00 DB 01 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 B8 FF 01 00 01 00 00 00 8F 40 E1 01 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 A0 03 02 00 01 00 00 00 91 80 E7 01 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 88 07 02 00 01 00 00 00 90 C0 ED 01 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 D0 DD 06 00 01 00 00 00 7A 00 F4 01 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 B8 E1 06 00 01 00 00 00 7B 40 FA 01 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 A0 E5 06 00 01 00 00 00 7C 80 00 02 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 88 E9 06 00 01 00 00 00 7D C0 06 02 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 80 A9 03 00 01 00 00 00 55 00 0D 02 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 60 CC 05 00 01 00 00 00 65 40 13 02 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 48 D0 05 00 01 00 00 00 66 80 19 02 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 30 D4 05 00 01 00 00 00 68 C0 1F 02 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 18 D8 05 00 01 00 00 00 69 00 26 02 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 E0 22 02 00 01 00 00 00 8A 40 2C 02 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 C8 26 02 00 01 00 00 00 8B 80 32 02 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 B0 2A 02 00 01 00 00 00 8C C0 38 02 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 98 2E 02 00 01 00 00 00 8D 00 3F 02 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 10 09 05 00 01 00 00 00 59 80 4B 02 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 F8 0C 05 00 01 00 00 00 5A C0 51 02 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 E0 10 05 00 01 00 00 00 5B 00 58 02 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 C8 14 05 00 01 00 00 00 5C 40 5E 02 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 E0 04 07 00 01 00 00 00 5E 40 77 02 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 C8 08 07 00 01 00 00 00 5F 80 7D 02 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 B0 0C 07 00 01 00 00 00 60 C0 83 02 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 98 10 07 00 01 00 00 00 61 00 8A 02 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 F0 49 02 00 01 00 00 00 72 40 90 02 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 D8 4D 02 00 01 00 00 00 73 80 96 02 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 C0 51 02 00 01 00 00 00 74 C0 9C 02 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 A8 55 02 00 01 00 00 00 75 00 A3 02 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 90 41 06 00 01 00 00 00 65 40 C2 02 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 78 45 06 00 01 00 00 00 66 80 C8 02 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 60 49 06 00 01 00 00 00 67 C0 CE 02 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 48 4D 06 00 01 00 00 00 68 00 D5 02 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 80 1A 06 00 01 00 00 00 56 40 DB 02 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 68 1E 06 00 01 00 00 00 57 80 E1 02 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 50 22 06 00 01 00 00 00 58 C0 E7 02 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 38 26 06 00 01 00 00 00 59 00 EE 02 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 C0 45 04 00 01 00 00 00 5A 40 F4 02 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 A8 49 04 00 01 00 00 00 5B 80 FA 02 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 90 4D 04 00 01 00 00 00 5C C0 00 03 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 78 51 04 00 01 00 00 00 5D 00 07 03 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 60 EA 00 00 01 00 00 00 5A 40 0D 03 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 48 EE 00 00 01 00 00 00 5B 80 13 03 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 30 F2 00 00 01 00 00 00 5C C0 19 03 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 18 F6 00 00 01 00 00 00 5D 00 20 03 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 40 EF 07 00 01 00 00 00 45 40 26 03 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 28 F3 07 00 01 00 00 00 46 80 2C 03 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 F8 FA 07 00 01 00 00 00 47 00 39 03 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 00 53 07 00 01 00 00 00 6A 40 3F 03 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 E8 56 07 00 01 00 00 00 6B 80 45 03 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 B8 5E 07 00 01 00 00 00 6C 00 52 03 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 10 30 C8 07 00 01 00 00 00 5D 40 58 03 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 18 CC 07 00 01 00 00 00 5E 80 5E 03 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 00 D0 07 00 01 00 00 00 5F C0 64 03 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 E8 D3 07 00 01 00 00 00 60 00 6B 03 01 00 00 00 C2 01 00 00 00 00 00 00 00 00 00 10 20 A1 07 00 01 00 00 00 6D 40 8A 03 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 08 A5 07 00 01 00 00 00 6E 80 90 03 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 D8 AC 07 00 01 00 00 00 6F 00 9D 03 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 A0 68 06 00 01 00 00 00 5E 40 A3 03 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 88 6C 06 00 01 00 00 00 5F 80 A9 03 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 70 70 06 00 01 00 00 00 60 C0 AF 03 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 58 74 06 00 01 00 00 00 61 00 B6 03 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 00 E2 04 00 01 00 00 00 6E 40 BC 03 01 00 00 00 26 02 00 00 00 00 00 00 00 00 00 10 E8 E5 04 00 01 00 00 00 6F 80 C2 03 01 00 00 00 26 02 00 00 00 00 00 00 00 00 00 10 D0 E9 04 00 01 00 00 00 70 C0 C8 03 01 00 00 00 26 02 00 00 00 00 00 00 00 00 00 10 B8 ED 04 00 01 00 00 00 71 00 CF 03 01 00 00 00 26 02 00 00 00 00 00 00 00 00 00 10 50 16 08 00 01 00 00 00 5A 40 D5 03 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 38 1A 08 00 01 00 00 00 5B 80 DB 03 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 20 1E 08 00 01 00 00 00 5C C0 E1 03 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 08 22 08 00 01 00 00 00 5D 00 E8 03 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 10 90 5F 01 00 01 00 00 00 45 40 EE 03 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 78 63 01 00 01 00 00 00 46 80 F4 03 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 60 67 01 00 01 00 00 00 47 C0 FA 03 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 48 6B 01 00 01 00 00 00 55 00 01 04 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 90 D0 03 00 01 00 00 00 71 40 07 04 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 78 D4 03 00 01 00 00 00 72 80 0D 04 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 60 D8 03 00 01 00 00 00 73 C0 13 04 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 48 DC 03 00 01 00 00 00 74 00 1A 04 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 F0 2B 07 00 01 00 00 00 62 C0 2C 04 01 00 00 00 BC 02 00 00 00 00 00 00 00 00 00 10 D8 2F 07 00 01 00 00 00 63 00 33 04 01 00 00 00 BC 02 00 00 00 00 00 00 00 00 00 10 C0 33 07 00 01 00 00 00 65 40 39 04 01 00 00 00 BC 02 00 00 00 00 00 00 00 00 00 10 A8 37 07 00 01 00 00 00 64 80 3F 04 01 00 00 00 BC 02 00 00 00 00 00 00 00 00 00 10 80 38 01 00 01 00 00 00 62 C0 45 04 01 00 00 00 BC 02 00 00 00 00 00 00 00 00 00 10 50 40 01 00 01 00 00 00 64 40 52 04 01 00 00 00 BC 02 00 00 00 00 00 00 00 00 00 10 38 44 01 00 01 00 00 00 65 80 58 04 01 00 00 00 BC 02 00 00 00 00 00 00 00 00 00 10 68 3C 01 00 01 00 00 00 63 00 4C 04 01 00 00 00 BC 02 00 00 00 00 00 00 00 00 00 10 B0 1E 04 00 01 00 00 00 6D C0 5E 04 01 00 00 00 BC 02 00 00 00 00 00 00 00 00 00 10 98 22 04 00 01 00 00 00 6E 00 65 04 01 00 00 00 BC 02 00 00 00 00 00 00 00 00 00 10 80 26 04 00 01 00 00 00 6F 40 6B 04 01 00 00 00 BC 02 00 00 00 00 00 00 00 00 00 10 68 2A 04 00 01 00 00 00 70 80 71 04 01 00 00 00 BC 02 00 00 00 00 00 00 00 00 00 10 60 3D 08 00 01 00 00 00 69 C0 C2 04 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 48 41 08 00 01 00 00 00 6A 00 C9 04 01 00 00 00 50 00 00 00 00 00 00 00 00 00 00 10 30 45 08 00 01 00 00 00 6B 40 CF 04 01 00 00 00 50 00 00 00 00 00 00 00 00 00 00 10 18 49 08 00 01 00 00 00 6C 80 D5 04 01 00 00 00 50 00 00 00 00 00 00 00 00 00 00 10 70 64 08 00 01 00 00 00 56 C0 DB 04 01 00 00 00 20 03 00 00 00 00 00 00 00 00 00 10 58 68 08 00 01 00 00 00 57 00 E2 04 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 40 6C 08 00 01 00 00 00 58 40 E8 04 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 28 70 08 00 01 00 00 00 59 80 EE 04 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 10 40 9C 00 00 01 00 00 00 45 C0 F4 04 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 28 A0 00 00 01 00 00 00 46 00 FB 04 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 10 A4 00 00 01 00 00 00 47 40 01 05 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 F8 A7 00 00 01 00 00 00 55 80 07 05 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 10 40 0D 03 00 01 00 00 00 81 C0 0D 05 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 28 11 03 00 01 00 00 00 82 00 14 05 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 10 15 03 00 01 00 00 00 83 40 1A 05 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 F8 18 03 00 01 00 00 00 84 80 20 05 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 10 A0 86 01 00 01 00 00 00 7D C0 26 05 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 88 8A 01 00 01 00 00 00 7E 00 2D 05 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 70 8E 01 00 01 00 00 00 7F 40 33 05 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 58 92 01 00 01 00 00 00 80 80 39 05 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 20 4E 00 00 01 00 00 00 75 C0 3F 05 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 08 52 00 00 01 00 00 00 76 00 46 05 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 F0 55 00 00 01 00 00 00 77 40 4C 05 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 D8 59 00 00 01 00 00 00 78 80 52 05 01 00 00 00 F4 01 00 00 00 00 00 00 00 00 00 10 C0 B6 06 00 01 00 00 00 66 C0 8A 05 01 00 00 00 84 03 00 00 00 00 00 00 00 00 00 10 A8 BA 06 00 01 00 00 00 67 00 91 05 01 00 00 00 84 03 00 00 00 00 00 00 00 00 00 10 90 BE 06 00 01 00 00 00 69 40 97 05 01 00 00 00 84 03 00 00 00 00 00 00 00 00 00 10 78 C2 06 00 01 00 00 00 68 80 9D 05 01 00 00 00 84 03 00 00 00 00 00 00 00 00 00 40 BE 14 00 00 0A 00 00 00 14 02 BF 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 B2 16 00 00 01 00 00 00 15 82 BF 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 A8 16 00 00 01 00 00 00 16 92 BF 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 90 15 00 00 0A 00 00 00 17 C2 BF 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 0C 17 00 00 05 00 00 00 18 D2 BF 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 A6 13 00 00 05 00 00 00 19 C2 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 B0 13 00 00 05 00 00 00 1A D2 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 E0 15 00 00 05 00 00 00 1B 22 BF 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 44 16 00 00 05 00 00 00 1C 72 BF 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 EA 15 00 00 05 00 00 00 1D 32 BF 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 86 15 00 00 05 00 00 00 1E B2 BF 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 92 13 00 00 05 00 00 00 1F B2 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 9C 13 00 00 05 00 00 00 20 A2 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 EC 13 00 00 05 00 00 00 21 F2 BF 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 F6 13 00 00 05 00 00 00 22 02 C0 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 B4 14 00 00 05 00 00 00 23 F2 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 C8 14 00 00 05 00 00 00 24 12 BF 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 16 17 00 00 05 00 00 00 25 E2 BF 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 BA 13 00 00 05 00 00 00 26 E2 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 74 0E 00 00 05 00 00 00 27 12 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 EE 0C 00 00 05 00 00 00 28 62 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 F4 0B 00 00 05 00 00 00 29 F2 BB 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 B8 0B 00 00 05 00 00 00 2A 92 BB 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 10 0E 00 00 05 00 00 00 2B 02 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 1A 0E 00 00 63 00 00 00 2C F2 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 9C 0E 00 00 05 00 00 00 2D 42 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 1C 0C 00 00 05 00 00 00 2E 22 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 E4 0C 00 00 05 00 00 00 2F 52 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 B6 0D 00 00 05 00 00 00 30 82 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 E0 0B 00 00 05 00 00 00 31 D2 BB 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 EA 0B 00 00 05 00 00 00 32 E2 BB 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 48 0D 00 00 05 00 00 00 33 A2 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 52 0D 00 00 05 00 00 00 34 B2 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 CC 0B 00 00 05 00 00 00 35 B2 BB 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 C2 0B 00 00 05 00 00 00 36 A2 BB 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 26 0C 00 00 05 00 00 00 37 32 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 D6 0B 00 00 05 00 00 00 38 C2 BB 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 D4 0D 00 00 05 00 00 00 39 92 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 7E 0E 00 00 05 00 00 00 3A 12 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 88 0E 00 00 05 00 00 00 3B 22 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 FE 0B 00 00 05 00 00 00 3C 02 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 30 0C 00 00 05 00 00 00 3D 42 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 DE 0D 00 00 05 00 00 00 3E E2 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 AC 0D 00 00 05 00 00 00 3F D2 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 C0 0D 00 00 05 00 00 00 40 72 BC 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 7C 10 00 00 05 00 00 00 41 32 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 A8 11 00 00 05 00 00 00 42 02 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 9E 11 00 00 05 00 00 00 43 B2 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 04 10 00 00 05 00 00 00 44 C2 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 AA 0F 00 00 05 00 00 00 45 62 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 D2 0F 00 00 05 00 00 00 46 E2 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 C8 0F 00 00 0A 00 00 00 47 A2 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 DC 0F 00 00 05 00 00 00 48 F2 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 A0 0F 00 00 05 00 00 00 49 52 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 BE 0F 00 00 05 00 00 00 4A 92 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 D6 10 00 00 05 00 00 00 4B 42 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 94 11 00 00 05 00 00 00 4C 82 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 0E 10 00 00 05 00 00 00 4D D2 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 B4 0F 00 00 05 00 00 00 4E 72 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 CC 10 00 00 05 00 00 00 4F 52 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 68 10 00 00 05 00 00 00 50 12 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 30 11 00 00 05 00 00 00 51 62 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 72 10 00 00 05 00 00 00 52 22 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 08 11 00 00 05 00 00 00 53 72 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 92 0E 00 00 01 00 00 00 54 32 BD 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 B2 11 00 00 01 00 00 00 55 82 BE 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 90 9A 89 00 01 00 00 00 56 42 F3 30 01 00 00 00 37 00 00 00 00 00 00 00 00 00 00 00 C0 92 89 00 01 00 00 00 57 C2 EF 22 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 40 FE 01 00 00 01 00 00 00 58 A2 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 02 00 00 01 00 00 00 59 C2 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 FF 01 00 00 01 00 00 00 5A B2 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 01 02 00 00 01 00 00 00 5B D2 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 02 02 00 00 01 00 00 00 5C E2 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 80 FC 0A 00 01 00 00 00 5D C2 EE 05 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 10 70 D5 0A 00 01 00 00 00 5E 82 E8 05 01 00 00 00 96 00 00 00 00 00 00 00 00 00 00 00 28 58 89 00 01 00 00 00 5F 42 08 3A 01 00 00 00 9A 01 00 00 00 00 00 00 00 00 00 00 C8 2B 16 00 01 00 00 00 60 42 9E 3A 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 50 E0 10 00 01 00 00 00 61 C2 E3 24 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 60 E3 16 00 01 00 00 00 62 42 80 3F 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 00 F0 4E 16 00 01 00 00 00 63 C2 5F 3A 01 00 00 00 E6 00 00 00 00 00 00 00 00 00 00 00 F8 23 16 00 01 00 00 00 64 C2 E2 39 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 08 4B 16 00 01 00 00 00 65 42 E9 3A 01 00 00 00 18 01 00 00 00 00 00 00 00 00 00 00 90 64 15 00 01 00 00 00 66 42 AA 38 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 E0 27 16 00 01 00 00 00 67 42 27 39 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 00 88 89 16 00 01 00 00 00 68 C2 65 39 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 00 10 5C 89 00 01 00 00 00 69 C2 C3 3A 01 00 00 00 F0 00 00 00 00 00 00 00 00 00 00 00 80 37 16 00 01 00 00 00 6A C2 53 3C 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 00 68 3B 16 00 01 00 00 00 6B 02 5A 3C 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 00 E8 79 16 00 01 00 00 00 6C 42 92 3C 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 00 10 20 16 00 01 00 00 00 6D C2 E8 38 01 00 00 00 FA 00 00 00 00 00 00 00 00 00 00 00 48 E7 16 00 01 00 00 00 6E C2 BE 3F 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 00 D0 FA 16 00 01 00 00 00 6F C2 3B 40 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 18 EF 16 00 01 00 00 00 70 42 7A 40 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 00 F8 5F 89 00 01 00 00 00 71 42 E4 3F 01 00 00 00 E6 00 00 00 00 00 00 00 00 00 00 00 30 EB 16 00 01 00 00 00 72 C2 09 40 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 00 00 76 16 00 01 00 00 00 73 42 1B 3B 01 00 00 00 18 01 00 00 00 00 00 00 00 00 00 40 64 00 00 00 01 00 00 00 74 22 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 65 00 00 00 01 00 00 00 75 42 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 81 01 00 00 01 00 00 00 76 F2 06 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 6A 00 00 00 01 00 00 00 77 12 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 72 00 00 00 01 00 00 00 78 B2 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0 D7 14 00 01 00 00 00 79 C2 44 32 01 00 00 00 32 00 00 00 00 00 00 00 00 00 00 00 60 0D 10 00 01 00 00 00 7A C2 E9 23 01 00 00 00 A0 00 00 00 00 00 00 00 00 00 00 00 B8 87 15 00 01 00 00 00 7B C2 7D 35 01 00 00 00 78 00 00 00 00 00 00 00 00 00 00 00 1C 33 06 00 01 00 00 00 7C 82 F7 0F 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 00 A0 AD 07 00 01 00 00 00 7D 42 56 14 01 00 00 00 78 00 00 00 00 00 00 00 00 00 00 00 BC C7 0D 00 01 00 00 00 7E 02 43 2B 01 00 00 00 E7 03 00 00 00 00 00 00 00 00 00 00 00 BE 0A 00 01 00 00 00 7F C2 A8 19 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 00 DC 09 10 00 01 00 00 00 80 C2 34 24 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 00 24 10 0D 00 01 00 00 00 81 02 02 21 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 00 D8 BE 04 00 01 00 00 00 82 C2 0E 09 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 00 1C FF 16 00 01 00 00 00 83 82 FD 40 01 00 00 00 58 02 00 00 00 00 00 00 00 00 00 00 6C 63 12 00 01 00 00 00 84 02 37 2D 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 00 C0 E5 13 00 01 00 00 00 85 C2 18 31 01 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 18 90 11 00 01 00 00 00 86 C2 54 27 01 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 90 CA 04 00 01 00 00 00 87 42 47 0A 01 00 00 00 90 01 00 00 00 00 00 00 00 00 00 00 A8 96 89 00 01 00 00 00 88 42 57 31 01 00 00 00 C8 00 00 00 00 00 00 00 00 00 00 00 20 83 89 00 01 00 00 00 89 C2 8B 09 01 00 00 00 2C 01 00 00 00 00 00 00 00 00 00 00 D8 BE 04 00 01 00 00 00 8A C2 0E 09 01 00 00 00 90 01 00 00 00 00 00 00 FF FF FF FF FF FF FF FF 00 00 00 00"

#Stats
stats_offsets_for_stats_tap = {
    "Level": -295,
    "vitality": -375,
    "Attunement":-367,
    "Endurance": -359,
    "Strength": -351,
    "Dexterity": -343,
    "Resistance": -303,
    "Faith": -327,
    "Intelligence": -335,
    "Humanity": -307,
    "Gender": -237,
    "Class": -233,


}

####
#vitality= + 0x1E2B9
#Attunement= -290
#Endurance=-0x1E2B5
#Strength= -351
#Dexterity= -343
#Resistance= -303
#Intelligence=-335
#Faith=-327
#Humanity= -331,-307

GENDER_MAP = {
    1: "Male",
    0: "Female"
}
REVERSE_GENDER_MAP = {v: k for k, v in GENDER_MAP.items()}

CLASS_MAP = {
    0: "Warrior",
    1: "Knight",
    2: "Wanderer",
    3: "Thief",
    4: "Bandit",
    5: "Hunter",
    6: "Sorcerer",
    7: "Pyromancer",
    8: "Cleric",
    9: "Deprived"
}
REVERSE_CLASS_MAP = {v: k for k, v in CLASS_MAP.items()}

# Main window
window = tk.Tk()
window.title("Elden Ring Save Editor")

#list
char_name = []
inventory_items=[]
weapons = []
armors = []
goods = []
rings = []

current_name=tk.StringVar()
current_name_var=tk.StringVar(value="N/A")
new_name_var=tk.StringVar()
current_runes_var=tk.StringVar(value="N/A")
new_runes_var=tk.StringVar()
current_hp_var=tk.StringVar(value="N/A")
new_hp_var=tk.StringVar()
current_st_var=tk.StringVar(value="N/A")
new_st_var=tk.StringVar()
current_stats_vars = {}
new_stats_vars = {}
imported_name=[]
# Initialize variables for each stat
for stat in stats_offsets_for_stats_tap:
    current_stats_vars[stat] = tk.StringVar()
    new_stats_vars[stat] = tk.StringVar()  # Use StringVar for all stats
current_ng_var = tk.StringVar(value="N/A")
new_ng_var = tk.StringVar()


#path
userdata_path=None
import_path=None

#bytes
data=None
imported_data=None

# Set the working directory
working_directory = os.path.dirname(os.path.abspath(__file__))
os.chdir(working_directory)

#Jsons
def load_and_copy_json(file_name):
    file_path = os.path.join(working_directory, "Resources/Json", file_name)
    with open(file_path, "r") as file:
        return json.load(file).copy()
    
goods_and_magic_json= load_and_copy_json("Consumables.json")
armor_json= load_and_copy_json("Armor.json")
rings_json= load_and_copy_json("Rings.json")
MeleeWeapons_json= load_and_copy_json("MeleeWeapons.json")


def find_hex_offset(section_data, hex_pattern):
    try:
        pattern_bytes = bytes.fromhex(hex_pattern)
        if pattern_bytes in section_data:
            return section_data.index(pattern_bytes)
        return None
    except ValueError as e:
        messagebox.showerror("Error", f"Failed to find hex pattern: {str(e)}")
        return None
    
def find_value_at_offset(section_data, offset, byte_size=4):
    try:
        value_bytes = section_data[offset:offset+byte_size]
        if len(value_bytes) == byte_size:
            return int.from_bytes(value_bytes, 'little')
    except IndexError:
        pass
    return None

def write_value_at_offset(data, offset, value, byte_size=4):
    value_bytes = value.to_bytes(byte_size, 'little')
    # Replace the bytes at the given offset with the new value
    return data[:offset] + value_bytes + data[offset+byte_size:]

def calculate_offset2(offset1, distance):
    return offset1 + distance

# load and copy JSON data from files in the working directory
def load_and_copy_json(file_name):
    file_path = os.path.join(working_directory, "Resources/Json", file_name)
    with open(file_path, "r") as file:
        return json.load(file).copy()
    
MODE=None

def save_file():
    global userdata_path, data

    if userdata_path is None or data is None:
        messagebox.showerror("Error", "No userdata loaded to save.")
        return

    # Write the modified data back to the userdata file
    with open(userdata_path, 'wb') as f:
        f.write(data)


def save_as():
    global MODE
    save_file()
    if MODE is None:
        messagebox.showerror("Error", "No mode set. Please open a valid userdata file first.")
        return
    if MODE=='PS4':
        file_name=os.path.basename(userdata_path)
    output_file = filedialog.asksaveasfilename(
        initialfile=file_name if MODE == 'PS4' else "DRAKS0005.sl2",
        filetypes=[("All files", "*.*")],
        title="Save merged file as"
    )

    if output_file:
        if MODE=='PS4':
            with open(output_file, 'wb') as f:
                f.write(data)
            messagebox.showinfo("Success", f"File saved as {output_file}")
        elif MODE=='PC':
            encrypt_modified_files(output_file)





def find_char_name(data):
    magic_bytes=bytes.fromhex(magic_pattern)
    magic_offset=data.find(magic_bytes)
    if magic_offset == -1:
        return None
    
    name_offset=magic_offset-0x10f


    max_chars = 16
    raw_name = data[name_offset:name_offset + max_chars * 2]
    char_name = raw_name.decode("utf-16-le", errors="ignore").rstrip("\x00")

    return char_name
def select_userdata(path, folder_name):
    global userdata_path, import_path, data, imported_data

    if folder_name == "split":
        if userdata_path is not None and data is not None:
            save_file()

        userdata_path = path
        load_data()
        




    elif folder_name == "imported":
        import_path = path
        with open(import_path, 'rb') as f:
            imported_data = f.read()

        if IMPORT_MODE=='PC' and MODE=='PC':

            data= imported_data
        if IMPORT_MODE=='PS4' and MODE=='PS4':
            data= imported_data
        if IMPORT_MODE=='PC' and MODE=='PS4':
            data=data[:4]+imported_data + data[0x60004:]
        if IMPORT_MODE=='PS4' and MODE=='PC':
            data=imported_data[4:0x60004]

        save_file()

        load_data()
        messagebox.showinfo("Import Successful", f"Imported character from {import_path} and replaced Steam ID.")



def char_name_to_userdata(folder_name=None, imported=None):
    global char_name, imported_name, current_file_path
    char_name = []
    imported_name=[]

    if folder_name is not None:
        split_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), folder_name)
        for i in range(10):

            
            file_path = os.path.join(split_dir, f"USERDATA_0{i}")
            with open(file_path, "rb") as f:
                data = f.read()
                name=find_char_name(data)
                if name is None:
                    return
                if folder_name == 'split':
                    char_name.append((name, file_path))
                elif folder_name == 'imported' and imported is not None and IMPORT_MODE=='PC':
                    imported_name.append((name, file_path))
    elif folder_name is None:
        if imported is None:
            file_path=current_file_path
        elif imported is not None and IMPORT_MODE=='PS4':
            file_path=import_path
        with open(file_path, "rb") as f:
                data = f.read()
                name=find_char_name(data)
                print('here')
                if name is None:
                    return
                print('here')
                if imported is None:
                    char_name.append((name, file_path))
                    print(char_name)
                elif imported is not None:
                    imported_name.append((name, file_path))

original_sl2_path=None

def decrypt_sl2(file_path):
    global original_sl2_path

    original_sl2_path = file_path 
    decrypt_ds2_sl2(file_path)

    
def display_char_name(folder_name):
    print(MODE)
    if IMPORT_MODE is None:
        if MODE == 'PS4':

            char_name_to_userdata()
            print()

        if MODE== 'PC':
            char_name_to_userdata(folder_name)
    elif IMPORT_MODE is not None:
        if IMPORT_MODE == 'PS4':

            char_name_to_userdata(imported=True)
        if IMPORT_MODE== 'PC':
            char_name_to_userdata(folder_name, imported=True)

    if folder_name == 'split':
        name_list = char_name
    elif folder_name == 'imported':
        name_list = imported_name
    else:
        return

    if folder_name == 'split':
        print(name_list)
        # Clear and redraw in the left panel
        for widget in file_open_frame.winfo_children():
            widget.destroy()

        selected_var = tk.StringVar()

        for n, path in name_list:
            rb = tk.Radiobutton(
                file_open_frame,
                text=n,
                variable=selected_var,
                value=path,
                indicatoron=False,
                width=20,
                command=lambda p=path, f=folder_name: select_userdata(p, f)
            )
            rb.pack(pady=2, fill="x")

        # --- Recreate the file buttons ---
        ttk.Button(file_open_frame, text="Open Save File", command=open_file).pack(pady=5, anchor="w")
        ttk.Button(file_open_frame, text="Save Modified File", command=save_as).pack(pady=5, anchor="w")
        ttk.Button(file_open_frame, text="Import Save File", command=import_save).pack(pady=5, anchor="w")
    

    elif folder_name == 'imported':
        # Open a separate window for imported saves
        import_window = tk.Toplevel()
        import_window.title("Select Imported Character")
        import_window.geometry("300x400")
        import_window.attributes("-topmost", True)

        selected_var = tk.StringVar()

        for n, path in name_list:
            rb = tk.Radiobutton(
                import_window,
                text=n,
                variable=selected_var,
                value=path,
                indicatoron=False,
                width=20,
                command=lambda p=path, f=folder_name, w=import_window: (
                    select_userdata(p, f),
                    w.destroy()  # close after selection
                )
            )
            rb.pack(pady=5, fill="x")
current_file_path=None
def open_file():
    global MODE, current_file_path, original_sl2_path

    file_path=filedialog.askopenfilename(title="Select your save file", filetypes=[("All files", "*.*")])
    file_name = os.path.basename(file_path)
    
    if file_name.startswith('userdata'):
        MODE='PS4'
        current_file_path=file_path
        
        display_char_name('split')
    
    if file_name== "DRAKS0005.sl2":
        MODE='PC'
        original_sl2_path=file_path
        decrypt_sl2(file_path)
        display_char_name('split')




def load_data():
    global userdata_path, current_name, data, magic_offset

    current_name = None
    data = None

    if userdata_path is None:
        return

    with open(userdata_path, 'rb') as f:
        data = f.read()
    
    # Name
    name = find_char_name(data)
    if name is not None:
        current_name = name
        current_name_var.set(current_name)   # <-- update the label
    else: 
        print('Name not found')
        current_name_var.set("Unknown")

    # NG+
    ng_pattern_offset = data.find(bytes.fromhex(hex_pattern_ng))
    if ng_pattern_offset == -1:  # use -1 check, not None
        return
    ng_offset = ng_pattern_offset + ng_distance
    current_ng = find_value_at_offset(data, ng_offset, byte_size=1)

    current_ng_var.set(current_ng)

    magic_offset = data.find(bytes.fromhex(magic_pattern))
    # HP
    hp_offset = calculate_offset2(magic_offset, health_distance)
    current_hp = find_value_at_offset(data, hp_offset)
    current_hp_var.set(current_hp if current_hp is not None else "N/A")

    #ST
    st_offset = calculate_offset2(magic_offset, stamina_distance)
    current_st = find_value_at_offset(data, st_offset)
    current_st_var.set(current_st if current_st is not None else "N/A")

    # Stats

    for stats, distance in stats_offsets_for_stats_tap.items():
        stats_offset = magic_offset + distance
        byte_size = 2 if stats == "Level" else 1
        current_stat_value = find_value_at_offset(data, stats_offset, byte_size)

        if current_stat_value is None:
            current_stats_vars[stats].set("N/A")
            new_stats_vars[stats].set("")
        elif stats == "Gender":
            display_value = GENDER_MAP.get(current_stat_value, f"Unknown ({current_stat_value})")
            current_stats_vars[stats].set(display_value)
            new_stats_vars[stats].set(display_value)
        elif stats == "Class":
            display_value = CLASS_MAP.get(current_stat_value, f"Unknown ({current_stat_value})")
            current_stats_vars[stats].set(display_value)
            new_stats_vars[stats].set(display_value)
        else:
            display_value = str(current_stat_value)
            current_stats_vars[stats].set(display_value)
            new_stats_vars[stats].set(display_value)
            print(stats, display_value)

    # Runes
    runes_offset = magic_offset + souls_distance
    current_runes_value = find_value_at_offset(data, runes_offset, byte_size=4)
    current_runes_var.set(current_runes_value)
    
    warp_status()
    print('souls', current_runes_value)
    print('ng', current_ng)

#Char name
def update_name(new_name):
    global data

    magic_offset = data.find(bytes.fromhex(magic_pattern))
    offset = magic_offset - 0x10f
    snd_offset=magic_offset-139

    # Encode to UTF-16 LE
    new_name_utf16 = new_name.encode("utf-16-le")
    # Pad or trim to 32 bytes (16 characters)
    new_name_utf16 = new_name_utf16[:32].ljust(32, b"\x00")

    # Write the new name into the save data
    data = data[:offset] + new_name_utf16 + data[offset+32:]
    data = data[:snd_offset] + new_name_utf16 + data[snd_offset+32:]

    # Update the Tkinter variable → this refreshes the label
    current_name_var.set(new_name)

    return data


def update_runes(new_runes):
    global data

    # Convert safely
    new_runes = int(new_runes)  # convert from string to int
    if new_runes > 4294967295:
        messagebox.showerror("Error", "Runes value must be between 0 and 4,294,967,295.")
        return

    decimal_runes = new_runes
    new_runes_bytes = new_runes.to_bytes(length=4, byteorder="little")

    # Find offset
    magic_offset = data.find(bytes.fromhex(magic_pattern))
    offset = magic_offset + souls_distance

    # Overwrite 4 bytes
    data = data[:offset] + new_runes_bytes + data[offset+4:]
    data = data[:offset+4] + new_runes_bytes + data[offset+4+4:]

    current_runes_var.set(str(decimal_runes))


    return data

def update_hp(new_hp):
    global data

    # Convert safely
    new_hp = int(new_hp)  # convert from string to int
    if new_hp > 4294967295:
        messagebox.showerror("Error", "hp value must be between 0 and 4,294,967,295.")
        return

    decimal_hp = new_hp
    new_hp_bytes = new_hp.to_bytes(length=4, byteorder="little")

    # Find offset
    magic_offset = data.find(bytes.fromhex(magic_pattern))
    offset = magic_offset + health_distance

    # Overwrite 4 bytes
    data = data[:offset] + new_hp_bytes + data[offset+4:]
    data = data[:offset+4] + new_hp_bytes + data[offset+4+4:]
    data = data[:offset+4+4] + new_hp_bytes + data[offset+4+4+4:]

    current_hp_var.set(str(decimal_hp))


    return data

def update_st(new_st):
    global data

    # Convert safely
    new_st = int(new_st)  # convert from string to int
    if new_st > 4294967295:
        messagebox.showerror("Error", "hp value must be between 0 and 4,294,967,295.")
        return

    decimal_st = new_st
    new_st_bytes = new_st.to_bytes(length=4, byteorder="little")

    # Find offset
    magic_offset = data.find(bytes.fromhex(magic_pattern))
    offset = magic_offset + stamina_distance

    # Overwrite 4 bytes
    data = data[:offset] + new_st_bytes + data[offset+4:]
    data = data[:offset+4] + new_st_bytes + data[offset+4+4:]
    data = data[:offset+4+4] + new_st_bytes + data[offset+4+4+4:]

    current_st_var.set(str(decimal_st))


    return data

def update_ng(new_ng):
    global data

    # Convert safely
    new_ng = int(new_ng)  # convert from string to int
    if new_ng < 0 or new_ng > 255:
        messagebox.showerror("Error", "NG+ value must be between 0 and 255.")
        return

    decimal_ng = new_ng
    new_ng_bytes = new_ng.to_bytes(length=1, byteorder="little")

    # Find offset
    magic_offset = data.find(bytes.fromhex(hex_pattern_ng))
    offset = magic_offset + ng_distance  # fix

    # Overwrite 1 byte
    data = data[:offset] + new_ng_bytes + data[offset+1:]

    current_ng_var.set(str(decimal_ng))


    return data



#Stats
def update_stat(stat):
    global data
    
    try:
        if stat == "Gender":
            selected = new_stats_vars[stat].get()

            if selected == "":  # Check if the user left the field empty
                raise ValueError("Please select a gender")
            new_stat_value = REVERSE_GENDER_MAP[selected]
        elif stat == "Class":
            selected = new_stats_vars[stat].get()

            if selected == "":  # Check if the user left the field empty
                raise ValueError("Please select a class")
            new_stat_value = REVERSE_CLASS_MAP[selected]
        else:
            # Get the value from the StringVar
            user_input = new_stats_vars[stat].get().strip()

            if user_input == "":
                raise ValueError(f"Please enter a valid value for {stat}.")
            new_stat_value = int(user_input)

    except (ValueError, KeyError) as e:
        messagebox.showerror("Invalid Input", str(e))
        return
    
    
    offset1 = find_hex_offset(data, magic_pattern)
    if offset1 is not None:

        relative_offset = calculate_offset2(offset1, stats_offsets_for_stats_tap[stat])
        absolute_offset = relative_offset
        
        
        # For Level stat, use 2 bytes
        byte_size = 2 if stat == "Level" else 1
        data=write_value_at_offset(data, absolute_offset, new_stat_value, byte_size=byte_size)
        
        # Set displayed value based on type
        if stat == "Gender":
            current_stats_vars[stat].set(GENDER_MAP[new_stat_value])
        elif stat == "Class":
            current_stats_vars[stat].set(CLASS_MAP[new_stat_value])
        else:
            current_stats_vars[stat].set(str(new_stat_value))
        
        messagebox.showinfo("Success", f"{stat} updated to {new_stat_value}.")
    else:
        messagebox.showerror("Pattern Not Found", "Pattern not found in the file.")   

def spawn_all_items():
    global data
    inevntory_start=0xA57

    for i in range(0x100):
        item = data[inevntory_start + i : inevntory_start + i + 4]
        if item == bytes.fromhex("A0BB0D00"):
            print("Item found at offset", inevntory_start+i)
            start_spawn= inevntory_start + i
            all_items_bytes=bytes.fromhex(all_items)
            data= data[:start_spawn]+ all_items_bytes + data[start_spawn + len(all_items_bytes):]
            messagebox.showinfo("Success", "All items spawned.")
            break
        else:
            print("No item at index")

#slot type
armor=0x10000000
Consumables= 0x40000000
Key_Items= 0x40000000
Melee_Weapons= 0x00000000
Ranged_Weapons= 0x00000000
Rings=0x20000000
Shields=0x00000000
Spells=0x40000000
Spell_Tools=0x00000000
Upgrade_Materials=0x40000000
Usable_Items=0x40000000
Mystery_Weapons=0x00000000
Mystery_Armor=0x10000000
Mystery_Goods=0x40000000
####

ITEM_TYPE_WEAPON = 0x00000000
ITEM_TYPE_ARMOR  = 0x10000000  
ITEM_TYPE_GOOD = 0X40000000
ITEM_TYPE_RINGS= 0X20000000 

import struct
import struct

class INVENTORY:
    BASE_SIZE = 0x1C  # 28 bytes

    def __init__(self, gaitem_handle, quantity, index, offset, slot_type):
        self.gaitem_handle = gaitem_handle 
        self.quantity = quantity
        self.index = index
        self.offset = offset
        self.size = self.BASE_SIZE
        self.slot_type = slot_type  

    @classmethod
    def from_bytes(cls, data, offset=0):
        # Unpack 7 unsigned integers (little-endian)
        unk_1, slot_type, gaitem_handle, quantity, index, unk_2, unk_3 = struct.unpack_from("<7I", data, offset)
        return cls(gaitem_handle, quantity, index, offset, slot_type)





def parse_inventory(data, start_offset, end_offset):
    inventory_item = []
    offset = start_offset

    while offset < end_offset:
        item = INVENTORY.from_bytes(data, offset)
        inventory_item.append(item)
        offset += item.size  

    return inventory_item

def inventoryprint():
    global data
    global weapons, aow, armors, goods, rings, empty, inventory_items
    
    inventory_items=[]
    weapons = []
    armors = []
    goods = []
    rings = []

    inevntory_start = 0x988
    pattern = bytes.fromhex("00 00 00 00 00 00 00 00 A0 BB 0D 00")
    pattern_len = len(pattern)

    for i in range(0x200):
        item = data[inevntory_start + i : inevntory_start + i + pattern_len]
        if item == pattern:
            print("Item found at offset", inevntory_start + i)
            start_spawn = inevntory_start + i
            print(start_spawn)
            break  

    

    end_offset = start_spawn + find_hex_offset(data[start_spawn:], '00 00 00 00 FF FF FF FF FF FF FF FF')

    items = parse_inventory(data, start_spawn, end_offset)

    for item in items:
        type_bits = item.slot_type & 0xF0000000
        inventory_items.append((item.slot_type, item.gaitem_handle, item.quantity, item.index, item.offset))

        if type_bits == ITEM_TYPE_WEAPON:
            weapons.append((item.slot_type,item.gaitem_handle, item.quantity, item.index, item.offset))
        elif type_bits == ITEM_TYPE_ARMOR:
            armors.append((item.slot_type,item.gaitem_handle, item.quantity, item.index, item.offset))
        elif type_bits == ITEM_TYPE_GOOD:
            goods.append((item.slot_type,item.gaitem_handle, item.quantity, item.index, item.offset))
        elif type_bits == ITEM_TYPE_RINGS:
            rings.append((item.slot_type,item.gaitem_handle, item.quantity, item.index, item.offset))
    
    
    # Reverse the JSON for faster lookups
    id_to_name = {int(v): k for k, v in goods_and_magic_json.items()}

    for slot_type, gaitem_handle, quantity, index, offset in goods:
        if gaitem_handle in id_to_name:
            #print(f"Found item: {id_to_name[gaitem_handle]} (ID: {gaitem_handle}) Qty: {quantity} Offset: {offset:08X}")
            break

index_list = []
import random

random_list = [0x00, 0x20, 0x40, 0x60, 0x80, 0xA0, 0xC0, 0xE0, 0xF0]

def resolve():
    index_fix = []
    new_index_list = []

    # Step 1: extract first two bytes from each index
    for slot_type, gaitem_handle, quantity, index, offset in inventory_items:
        index_bytes = index.to_bytes(4, "little")
        trimmed = index_bytes[:2]  # first two bytes little-endian
        index_fix.append(trimmed)

        # store 12-bit value: first byte + low nibble of second byte
        index_value = trimmed[0] | ((trimmed[1] & 0x0F) << 8)
        new_index_list.append(index_value)

    # Step 2: find highest index
    highest_index = max(new_index_list) if new_index_list else 0

    # Step 3: create new entry - CORRECTED CALCULATION
    new_index_value = highest_index + 1
    
    # First byte is the low 8 bits of the index
    new_first_byte = new_index_value & 0xFF
    
    # Second byte: high nibble is random, low nibble is bits 8-11 of the index
    random_high_nibble = random.choice(random_list)
    new_second_byte = random_high_nibble | ((new_index_value >> 8) & 0x0F)

    new_index_bytes = bytes([new_first_byte, new_second_byte])

    # Step 4: append new entry
    new_index_list.append(new_index_value)
    index_fix.append(new_index_bytes)

    global index_list
    index_list = new_index_list

    print("index values:", [hex(i) for i in index_list])
    print("new index bytes:", new_index_bytes.hex())
    print("new index value:", hex(new_index_value))

def spawn_items(item, item_type, quantity=None):
    global data
    offset=data.find(bytes.fromhex(magic_pattern))
    ture_offset=offset+0x14d
    increment_counter= struct.unpack_from('<II', data, ture_offset)[0]
    increment_counter += 1
    data = write_value_at_offset(data, ture_offset, increment_counter, byte_size=2)
    inventoryprint()
    resolve()
    if quantity is None:
        quantity = 1

    # Get the current index bytes from resolve (or use default if first item)
    if index_list:
        # We need the actual bytes that were generated, not just the index value
        # For now, we'll reconstruct them from the highest index
        highest_index = index_list[-1]
        random_high_nibble = random.choice(random_list)
        current_first_byte = highest_index & 0xFF
        current_second_byte = random_high_nibble | ((highest_index >> 8) & 0x0F)
        sort_value = bytes([current_first_byte, current_second_byte]) + bytes([random.randint(0, 255)])+ bytes([random.randint(0, 255)])
    else:
        # First item - start with default
        sort_value = bytes([0x56, 0xF0, random.randint(0, 255), random.randint(0, 255)]) 
    
    if item_type == 'weapon':
        item_id = int(MeleeWeapons_json.get(item))
        slot_type = Melee_Weapons
        
    elif item_type == 'armor':
        item_id = int(armor_json.get(item))
        slot_type = armor

    elif item_type == 'goods':
        item_id = int(goods_and_magic_json.get(item))
        slot_type = Consumables

    elif item_type == 'rings':
        item_id = int(rings_json.get(item))
        slot_type = Rings

    start_offset = 0xA60
    empty_slot = bytes.fromhex('FF FF FF FF FF FF FF FF')
    last_slot = bytes.fromhex('00 00 00 00 FF FF FF FF FF FF FF FF')
    quantity_bytes = quantity.to_bytes(4, "little")
    item_id_bytes = item_id.to_bytes(4, "little")
    slot_type_bytes = slot_type.to_bytes(4, "little")
    something = 1
    something_bytes = something.to_bytes(4, 'little')
    durability = 0xC8
    durability_bytes = durability.to_bytes(4, 'little')

    slot = slot_type_bytes + item_id_bytes + quantity_bytes + sort_value + something_bytes + durability_bytes + last_slot
    
    for i in range(0x6500):
        find_pattern = data[start_offset+i:start_offset+i+12]
        if find_pattern == last_slot:
            empty_slot_offset = start_offset + i
            print('empty offset found at', hex(empty_slot_offset))
            break
    
    empty_slot_offset = empty_slot_offset + 4
    data = data[:empty_slot_offset] + slot + data[empty_slot_offset+len(slot):]
    print(f'Spawned {item} x{quantity}')
    print(f'Slot data: {slot.hex().upper()}')
    print(f'At offset: {empty_slot_offset:08X}')
    
IMPORT_MODE=None

##Save import
def import_save():
    global IMPORT_MODE
    global imported_data, import_path

    imported_data = None
    import_path = None
    IMPORT_MODE=None

    file_path = filedialog.askopenfilename(
        title="Select imported save", 
        filetypes=[("All Files", "*.*")]
    )
    if not file_path:
        return
    
    file_name= os.path.basename(file_path)
    if file_name == "DRAKS0005.sl2":
        IMPORT_MODE='PC'
        decrypt_ds2_sl2_import(file_path)


    elif file_name.startswith('userdata'):
        IMPORT_MODE='PS4'
        import_path=file_path

        

    # Show character selection window
    display_char_name("imported")  

current_warp_status_var = tk.StringVar(value="Locked")
#bonfire
def warp_status():
    global data
    try:
        offset = data.find(bytes.fromhex(magic_pattern))
        true_offset = offset + 0x1F015
        byte = data[true_offset]
        if byte == 0:
            status = "Locked"
            warp_checkbox_var.set(0)
        else:
            status = "Unlocked"
            warp_checkbox_var.set(1)
        current_warp_status_var.set(status)
    except Exception as e:
        messagebox.showerror("Error", f"Failed to read warp status: {e}")


def unlock_warp():
    global data
    try:
        offset = data.find(bytes.fromhex(magic_pattern))
        true_offset = offset + 0x1F015
        if warp_checkbox_var.get() == 1:
            # Write 0x22 to unlock warp
            data = bytearray(data)
            struct.pack_into('<B', data, true_offset, 0x22)
            data = bytes(data)
            current_warp_status_var.set("Unlocked")
        else:
            # Re-lock by setting 0x00
            data = bytearray(data)
            struct.pack_into('<B', data, true_offset, 0x00)
            data = bytes(data)
            current_warp_status_var.set("Locked")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to modify warp status: {e}")

def unlock_all_warps():
    global data
    offset= data.find(bytes.fromhex(magic_pattern))
    true_offset= offset + 0x1EFD4
    data=write_value_at_offset(data, true_offset, 0xFF, byte_size=1)
    true_offset_1= offset + 0x1EFD3
    data=write_value_at_offset(data, true_offset_1, 0xFF, byte_size=1)
    true_offset_2= offset + 0x1EFD2
    data=write_value_at_offset(data, true_offset_2, 0xF0, byte_size=1)
    warp_checkbox_var.set(1)
    unlock_warp()
    current_warp_status_var.set("Unlocked")
    messagebox.showinfo("Success", "All warps unlocked.")



#UI
file_open_frame = tk.Frame(window)
file_open_frame.pack(side="left", fill="y", padx=10, pady=5)

ttk.Button(file_open_frame, text="Open Save File", command=open_file).pack(pady=5, anchor="w")
file_name_label = tk.Label(file_open_frame, text="No file selected", anchor="w")
file_name_label.pack(pady=5, anchor="w")


notebook = ttk.Notebook(window)

# Character Tab
name_tab = ttk.Frame(notebook)

# Create a main container with padding
main_container = ttk.Frame(name_tab, padding="20")
main_container.grid(row=0, column=0, sticky="nsew")

# Configure grid weights for responsive layout
name_tab.columnconfigure(0, weight=1)
name_tab.rowconfigure(0, weight=1)

# === Character Information Section ===
info_frame = ttk.LabelFrame(main_container, text="Character Information", padding="15")
info_frame.grid(row=0, column=0, sticky="ew", pady=(0, 15))

ttk.Label(info_frame, text="Current Name:").grid(row=0, column=0, padx=10, pady=8, sticky="w")
ttk.Label(info_frame, textvariable=current_name_var, font=("", 10, "bold")).grid(row=0, column=1, padx=10, pady=8, sticky="w")

ttk.Label(info_frame, text="New Name:").grid(row=1, column=0, padx=10, pady=8, sticky="w")
ttk.Entry(info_frame, textvariable=new_name_var, width=30).grid(row=1, column=1, padx=10, pady=8, sticky="ew")

ttk.Button(info_frame, text="Update Name", command=lambda: update_name(new_name_var.get())).grid(
    row=2, column=0, columnspan=2, pady=(10, 5), padx=10, sticky="ew"
)

info_frame.columnconfigure(1, weight=1)

# === Stats Section ===
stats_frame = ttk.LabelFrame(main_container, text="Character Stats", padding="15")
stats_frame.grid(row=1, column=0, sticky="ew", pady=(0, 15))

# Health
ttk.Label(stats_frame, text="Health:").grid(row=0, column=0, padx=10, pady=8, sticky="w")
ttk.Label(stats_frame, textvariable=current_hp_var, font=("", 10, "bold")).grid(row=0, column=1, padx=10, pady=8, sticky="w")
ttk.Entry(stats_frame, textvariable=new_hp_var, width=20).grid(row=0, column=2, padx=10, pady=8)
ttk.Button(stats_frame, text="Update", command=lambda: update_hp(new_hp_var.get()), width=12).grid(
    row=0, column=3, padx=10, pady=8
)

# Stamina
ttk.Label(stats_frame, text="Stamina:").grid(row=1, column=0, padx=10, pady=8, sticky="w")
ttk.Label(stats_frame, textvariable=current_st_var, font=("", 10, "bold")).grid(row=1, column=1, padx=10, pady=8, sticky="w")
ttk.Entry(stats_frame, textvariable=new_st_var, width=20).grid(row=1, column=2, padx=10, pady=8)
ttk.Button(stats_frame, text="Update", command=lambda: update_st(new_st_var.get()), width=12).grid(
    row=1, column=3, padx=10, pady=8
)

stats_frame.columnconfigure(2, weight=1)

# === Progress Section ===
progress_frame = ttk.LabelFrame(main_container, text="Game Progress", padding="15")
progress_frame.grid(row=2, column=0, sticky="ew", pady=(0, 15))

# NG+
ttk.Label(progress_frame, text="NG+ Level:").grid(row=0, column=0, padx=10, pady=8, sticky="w")
ttk.Label(progress_frame, textvariable=current_ng_var, font=("", 10, "bold")).grid(row=0, column=1, padx=10, pady=8, sticky="w")
ttk.Entry(progress_frame, textvariable=new_ng_var, width=20).grid(row=0, column=2, padx=10, pady=8)
ttk.Button(progress_frame, text="Update", command=lambda: update_ng(new_ng_var.get()), width=12).grid(
    row=0, column=3, padx=10, pady=8
)

progress_frame.columnconfigure(2, weight=1)

# === Currency Section ===
currency_frame = ttk.LabelFrame(main_container, text="Currency", padding="15")
currency_frame.grid(row=3, column=0, sticky="ew")

ttk.Label(currency_frame, text="Runes:").grid(row=0, column=0, padx=10, pady=8, sticky="w")
ttk.Label(currency_frame, textvariable=current_runes_var, font=("", 10, "bold")).grid(row=0, column=1, padx=10, pady=8, sticky="w")

runes_entry_frame = ttk.Frame(currency_frame)
runes_entry_frame.grid(row=0, column=2, padx=10, pady=8, sticky="ew")

ttk.Entry(runes_entry_frame, textvariable=new_runes_var, width=20).pack(side="left", padx=(0, 5))
ttk.Label(runes_entry_frame, text="(MAX: 999,999,999)", foreground="gray").pack(side="left")

ttk.Button(currency_frame, text="Update", command=lambda: update_runes(new_runes_var.get()), width=12).grid(
    row=0, column=3, padx=10, pady=8
)


# === Warp Section ===
warp_frame = ttk.LabelFrame(main_container, text="Warp", padding="15")
warp_frame.grid(row=4, column=0, sticky="ew", pady=(0, 15))

warp_checkbox_var = tk.IntVar(value=0)

# Checkbox widget
warp_checkbox = ttk.Checkbutton(
    warp_frame,
    text="Warp Status (Unlock)",
    variable=warp_checkbox_var,
    command=unlock_warp
)
warp_checkbox.grid(row=0, column=0, padx=10, pady=8, sticky="w")

# Status label
warp_status_label = ttk.Label(
    warp_frame,
    textvariable=current_warp_status_var
)
warp_status_label.grid(row=0, column=1, padx=10, pady=8, sticky="w")

warp_frame.columnconfigure(1, weight=1)

# Button for unlocking all bonfires
unlock_all_button = ttk.Button(
    warp_frame,
    text="Unlock All Bonfires",
    command=unlock_all_warps
)
unlock_all_button.grid(row=0, column=1, padx=10, pady=5, sticky="w")


currency_frame.columnconfigure(2, weight=1)

# Configure main container column weight
main_container.columnconfigure(0, weight=1)



# Stats Tab
stats_tab = ttk.Frame(notebook)
for idx, (stat, stat_offset) in enumerate(stats_offsets_for_stats_tap.items()):
    ttk.Label(stats_tab, text=f"Current {stat}:").grid(row=idx, column=0, padx=10, pady=5, sticky="e")
    ttk.Label(stats_tab, textvariable=current_stats_vars[stat]).grid(row=idx, column=1, padx=10, pady=5)
    
    # Use different widgets based on the stat type
    if stat == "Gender":
        # Combobox for Gender
        gender_combo = ttk.Combobox(stats_tab, textvariable=new_stats_vars[stat], 
                                    values=list(GENDER_MAP.values()), 
                                    state="readonly", width=10)
        gender_combo.grid(row=idx, column=2, padx=10, pady=5)
    elif stat == "Class":
        # Combobox for Class
        class_combo = ttk.Combobox(stats_tab, textvariable=new_stats_vars[stat], 
                                  values=list(CLASS_MAP.values()), 
                                  state="readonly", width=10)
        class_combo.grid(row=idx, column=2, padx=10, pady=5)
    else:
        # Regular Entry for numeric stats
        ttk.Entry(stats_tab, textvariable=new_stats_vars[stat], width=10).grid(row=idx, column=2, padx=10, pady=5)
    
    ttk.Button(stats_tab, text=f"Update {stat}", command=lambda s=stat: update_stat(s)).grid(row=idx, column=3, padx=10, pady=5)

#Tabs
notebook.add(name_tab, text="Character")
notebook.add(stats_tab, text="Stats")

notebook.pack(expand=True, fill="both", padx=10, pady=10)

#Item spawn
# --- Spawn Items Tab ---
spawn_items_tab = ttk.Frame(notebook)
notebook.add(spawn_items_tab, text="Spawn Items")

# --- Internal notebook for Goods, Talismans, Weapons, Armors, AoW ---
items_notebook = ttk.Notebook(spawn_items_tab)
items_notebook.pack(fill="both", expand=True)

# --- Goods Tab ---
goods_tab = ttk.Frame(items_notebook)
items_notebook.add(goods_tab, text="Goods and Magic")

All_items_tab = ttk.Frame(items_notebook)
items_notebook.add(All_items_tab, text="Spawn All Items")
ttk.Button(All_items_tab, text="Spawn All Items", command=spawn_all_items).pack(pady=20)
all_text = """
This will replace your entire inventory.
"""


all_label = tk.Label(All_items_tab, text=all_text, wraplength=400, justify="left", anchor="nw")
all_label.pack(padx=10, pady=10, fill="x") 

# --- Talismans Tab ---
talisman_tab = ttk.Frame(items_notebook)
items_notebook.add(talisman_tab, text="Rings")

# --- Weapons Tab ---
weapons_tab = ttk.Frame(items_notebook)
items_notebook.add(weapons_tab, text="Weapons")

# --- Armors Tab ---
armors_tab = ttk.Frame(items_notebook)
items_notebook.add(armors_tab, text="Armors")

# --- Goods Search Bar (at top) ---
select_all_var = tk.IntVar(value=0)
goods_category_ranges = {
    "Consumables": (0, 63),
    "Key Items": (63, 87),
    "Spells": (87, 158),
    "Upgrade Materials": (158, 182),
    "Usable Items": (182, 204),
    "Mystery Goods": (204, 242),

}
goods_names = list(goods_and_magic_json.keys())

goods_categories = {
    cat: goods_names[start:end]
    for cat, (start, end) in goods_category_ranges.items()
}

tk.Label(goods_tab, text="Search Goods:").pack(anchor="w", padx=5, pady=2)
goods_search_var = tk.StringVar()
goods_search_entry = tk.Entry(goods_tab, textvariable=goods_search_var)
goods_search_entry.pack(fill="x", anchor="w", padx=5, pady=2)

# --- Goods Treeview with category dropdown ---
goods_tree_frame = tk.Frame(goods_tab)
goods_tree_frame.pack(fill="both", expand=True, padx=5, pady=5)

# Dropdown for category filter
goods_category_var = tk.StringVar()
goods_category_dropdown = ttk.Combobox(
    goods_tree_frame,
    textvariable=goods_category_var,
    values=list(goods_categories.keys()),
    state="readonly"
)
goods_category_dropdown.pack(fill="x", padx=5, pady=5)

# Treeview
goods_tree = ttk.Treeview(goods_tree_frame, show="tree", height=20)  # FIX: only show tree
goods_tree.heading("#0", text="Items")
goods_tree.pack(fill="both", expand=True, side="left")

scrollbar = ttk.Scrollbar(goods_tree_frame, orient="vertical", command=goods_tree.yview)
goods_tree.configure(yscrollcommand=scrollbar.set)
scrollbar.pack(side="right", fill="y")

# Cache item IDs and vars
item_vars = {}
item_ids = {}

def load_goods_category(category):
    """Clear and load selected category items into the tree."""
    goods_tree.delete(*goods_tree.get_children())
    item_vars.clear()
    item_ids.clear()

    items = goods_categories.get(category, [])
    for item in items:
        var = tk.IntVar(value=0)
        item_id = goods_tree.insert("", "end", text=item, tags=("item",))
        item_vars[item] = var
        item_ids[item] = item_id

    # Reset select-all when category changes
    select_all_var.set(0)

# Dropdown event
def on_category_change(event=None):
    selected_cat = goods_category_var.get()
    if selected_cat:
        load_goods_category(selected_cat)

goods_category_dropdown.bind("<<ComboboxSelected>>", on_category_change)

# Default: load first category
if goods_categories:
    first_cat = list(goods_categories.keys())[0]
    goods_category_var.set(first_cat)
    load_goods_category(first_cat)

# Click toggling
def on_tree_click(event):
    item = goods_tree.identify('item', event.x, event.y)
    if item:
        item_text = goods_tree.item(item, "text")
        if item_text in item_vars:
            current = item_vars[item_text].get()
            item_vars[item_text].set(1 if current == 0 else 0)
            # Update visual feedback
            if item_vars[item_text].get():
                goods_tree.item(item, tags=("item", "checked"))
            else:
                goods_tree.item(item, tags=("item",))

goods_tree.bind("<Button-1>", on_tree_click)
goods_tree.tag_configure("checked", background="lightblue")

# --- Category-level "Select All" for current category ---


def toggle_current_category():
    current_state = select_all_var.get()
    current_cat = goods_category_var.get()
    if not current_cat:
        return
    
    for item in goods_categories.get(current_cat, []):
        item_vars[item].set(current_state)
        if current_state:
            goods_tree.item(item_ids[item], tags=("item", "checked"))
        else:
            goods_tree.item(item_ids[item], tags=("item",))

select_all_checkbox = tk.Checkbutton(
    goods_tab,
    text="Select All in Current Category",
    variable=select_all_var,
    command=toggle_current_category
)
select_all_checkbox.pack(anchor="w", padx=5, pady=5)

# --- Search filter ---
search_after_id = None

def filter_goods():
    term = goods_search_var.get().lower()
    current_cat = goods_category_var.get()
    if not current_cat:
        return

    goods_tree.delete(*goods_tree.get_children())
    item_vars.clear()
    item_ids.clear()

    for item in goods_categories.get(current_cat, []):
        if term in item.lower():
            var = tk.IntVar(value=0)
            item_id = goods_tree.insert("", "end", text=item, tags=("item",))
            item_vars[item] = var
            item_ids[item] = item_id

def debounced_filter(*args):
    global search_after_id
    if search_after_id:
        goods_tab.after_cancel(search_after_id)
    search_after_id = goods_tab.after(200, filter_goods)

goods_search_var.trace_add("write", debounced_filter)

# --- Add selected goods button ---
tk.Label(goods_tab, text="Quantity:").pack(anchor="w", padx=5, pady=2)
goods_quantity_entry = tk.Entry(goods_tab, width=10)
goods_quantity_entry.insert(0, "1")
goods_quantity_entry.pack(anchor="w", padx=5, pady=2)

def add_selected_goods():
    quantity = int(goods_quantity_entry.get())
    for item_name, var in item_vars.items():
        if var.get():
            spawn_items(item_name,  "goods", quantity)
    messagebox.showinfo("Info", "Selected Goods added to inventory.")

tk.Button(goods_tab, text="Add Selected Goods", command=add_selected_goods).pack(padx=5, pady=2)

def add_selected_goods_stack():
    quantity = int(goods_quantity_entry.get())
    for item_name, var in item_vars.items():
        if var.get():
            spawn_items(item_name, quantity, "goods", Stack=True)
    messagebox.showinfo("Info", "Selected Goods added to inventory.")

tk.Button(goods_tab, text="Stack Selected Goods", command=add_selected_goods_stack).pack(padx=6, pady=3)

# --- Talismans with optimized search ---
tk.Label(talisman_tab, text="Search Rings:").pack(anchor="w", padx=5, pady=2)
talisman_search_var = tk.StringVar()
talisman_search_entry = tk.Entry(talisman_tab, textvariable=talisman_search_var)
talisman_search_entry.pack(anchor="w", padx=5, pady=2)

# NEW: Cache talisman names as list
talisman_names = list(rings_json.keys())

talisman_frame = tk.Frame(talisman_tab)
talisman_frame.pack(fill="both", expand=True, padx=5, pady=5)

talisman_listbox = tk.Listbox(talisman_frame, selectmode="extended")
talisman_listbox.pack(fill="both", expand=True, side="left")

talisman_scrollbar = ttk.Scrollbar(talisman_frame, orient="vertical", command=talisman_listbox.yview)
talisman_listbox.configure(yscrollcommand=talisman_scrollbar.set)
talisman_scrollbar.pack(side="right", fill="y")

for name in talisman_names:
    talisman_listbox.insert("end", name)

# NEW: Debounce talisman search
talisman_search_after_id = None

def filter_talismans():
    search_term = talisman_search_var.get().lower()
    
    if not search_term:
        # Restore all items
        talisman_listbox.delete(0, "end")
        for name in talisman_names:
            talisman_listbox.insert("end", name)
        return
    
    # Filter list
    talisman_listbox.delete(0, "end")
    for name in talisman_names:
        if search_term in name.lower():
            talisman_listbox.insert("end", name)

def debounced_talisman_filter(*args):
    global talisman_search_after_id
    if talisman_search_after_id:
        talisman_tab.after_cancel(talisman_search_after_id)
    talisman_search_after_id = talisman_tab.after(200, filter_talismans)

talisman_search_var.trace_add("write", debounced_talisman_filter)

# --- Add Selected Talismans ---
def add_selected_talismans():
    selected_names = []
    for i in talisman_listbox.curselection():
        name = talisman_listbox.get(i)
        spawn_items(name, "rings")
        selected_names.append(name)
    
    if selected_names:
        names_str = ", ".join(selected_names)
        messagebox.showinfo("Info", f"Added {names_str} to inventory.")
    else:
        messagebox.showwarning("No Selection", "Please select at least one talisman.")

tk.Button(talisman_tab, text="Add Selected Ring", command=add_selected_talismans).pack(padx=5, pady=2)

# --- Add All Talismans ---
def add_all_talismans():
    for name in talisman_names:  # Use cached list
        spawn_items(name,"rings")
    messagebox.showinfo("Info", "All Rings added to inventory.")
tk.Button(talisman_tab, text="Add All Rings", command=add_all_talismans).pack(padx=5, pady=2)

# --- Weapons Tab with optimized search ---
weapon_categories = {
    "Swords": (0,108),
    "Bows": (108, 133),
    "Shields": (133, 176),
    "Spell Tools": (176, 197),
    "Cut content weapons": (197, 224),


}

tk.Label(weapons_tab, text="Search Weapons:").pack(anchor="w", padx=5, pady=2)
weapons_search_var = tk.StringVar()
weapons_search_entry = tk.Entry(weapons_tab, textvariable=weapons_search_var)
weapons_search_entry.pack(anchor="w", padx=5, pady=2)

# Cache weapon names as list
weapons_names = list(MeleeWeapons_json.keys())

weapons_frame = tk.Frame(weapons_tab)
weapons_frame.pack(fill="both", expand=True, padx=5, pady=5)

weapons_listbox = tk.Listbox(weapons_frame, selectmode="extended")
weapons_listbox.pack(fill="both", expand=True, side="left")

weapons_scrollbar = ttk.Scrollbar(weapons_frame, orient="vertical", command=weapons_listbox.yview)
weapons_listbox.configure(yscrollcommand=weapons_scrollbar.set)
weapons_scrollbar.pack(side="right", fill="y")

for name in weapons_names:
    weapons_listbox.insert("end", name)

# Debounce weapon search
weapons_search_after_id = None

def filter_weapons():
    search_term = weapons_search_var.get().lower()
    
    if not search_term:
        weapons_listbox.delete(0, "end")
        for name in weapons_names:
            weapons_listbox.insert("end", name)
        return
    
    weapons_listbox.delete(0, "end")
    for name in weapons_names:
        if search_term in name.lower():
            weapons_listbox.insert("end", name)

def debounced_weapons_filter(*args):
    global weapons_search_after_id
    if weapons_search_after_id:
        weapons_tab.after_cancel(weapons_search_after_id)
    weapons_search_after_id = weapons_tab.after(200, filter_weapons)

weapons_search_var.trace_add("write", debounced_weapons_filter)
selected_category = tk.StringVar(value="All")

category_dropdown = ttk.Combobox(
    weapons_tab, 
    textvariable=selected_category,
    values=["All"] + list(weapon_categories.keys()),
    state="readonly"
)
category_dropdown.pack(anchor="w", padx=5, pady=2)

def update_weapon_list(*args):
    weapons_listbox.delete(0, "end")
    if selected_category.get() == "All":
        for name in weapons_names:
            weapons_listbox.insert("end", name)
    else:
        start, end = weapon_categories[selected_category.get()]
        for name in weapons_names[start:end]:
            weapons_listbox.insert("end", name)

category_dropdown.bind("<<ComboboxSelected>>", update_weapon_list)
def add_selected_weapons():
    selected_names = []
    for i in weapons_listbox.curselection():
        name = weapons_listbox.get(i)
        spawn_items(name, "weapon")
        selected_names.append(name)

    if selected_names:
        # Display each weapon name on a new line for readability
        names_str = "\n".join(selected_names)
        messagebox.showinfo("Info", f"The following weapons were added to inventory:\n\n{names_str}. The weapon will show as broken, buy or collect and item to fix it")
    else:
        messagebox.showwarning("No Selection", "Please select at least one weapon.")

tk.Button(weapons_tab, text="Add Selected Weapons", command=add_selected_weapons).pack(padx=5, pady=2)

def add_all_weapons():
    if selected_category.get() == "All":
        names_to_add = weapons_names
    else:
        start, end = weapon_categories[selected_category.get()]
        names_to_add = weapons_names[start:end]

    for name in names_to_add:
        spawn_items(name, "weapon")
    messagebox.showinfo("Info", f"All {selected_category.get()} Weapons added to inventory.. The weapon will show as broken, buy or collect and item to fix it")
tk.Button(weapons_tab, text="Add All Weapons in selected category", command=add_all_weapons).pack(padx=5, pady=2)
weapom_text = """
The Weapons will show as broken, buy or collect an item to fix it.
"""


weapon_label = tk.Label(weapons_tab, text=weapom_text, wraplength=400, justify="left", anchor="nw")
weapon_label.pack(padx=10, pady=10, fill="x") 

# --- Armors Tab with optimized search ---
tk.Label(armors_tab, text="Search Armors:").pack(anchor="w", padx=5, pady=2)
armors_search_var = tk.StringVar()
armors_search_entry = tk.Entry(armors_tab, textvariable=armors_search_var)
armors_search_entry.pack(anchor="w", padx=5, pady=2)

# Cache armor names as list
armors_names = list(armor_json.keys())

armors_frame = tk.Frame(armors_tab)
armors_frame.pack(fill="both", expand=True, padx=5, pady=5)

armors_listbox = tk.Listbox(armors_frame, selectmode="extended")
armors_listbox.pack(fill="both", expand=True, side="left")

armors_scrollbar = ttk.Scrollbar(armors_frame, orient="vertical", command=armors_listbox.yview)
armors_listbox.configure(yscrollcommand=armors_scrollbar.set)
armors_scrollbar.pack(side="right", fill="y")

for name in armors_names:
    armors_listbox.insert("end", name)

# Debounce armor search
armors_search_after_id = None

def filter_armors():
    search_term = armors_search_var.get().lower()
    
    if not search_term:
        armors_listbox.delete(0, "end")
        for name in armors_names:
            armors_listbox.insert("end", name)
        return
    
    armors_listbox.delete(0, "end")
    for name in armors_names:
        if search_term in name.lower():
            armors_listbox.insert("end", name)

def debounced_armors_filter(*args):
    global armors_search_after_id
    if armors_search_after_id:
        armors_tab.after_cancel(armors_search_after_id)
    armors_search_after_id = armors_tab.after(200, filter_armors)

armors_search_var.trace_add("write", debounced_armors_filter)

def add_selected_armors():
    for i in armors_listbox.curselection():
        name = armors_listbox.get(i)
        spawn_items(name, "armor")
    messagebox.showinfo("Info", "Selected Armors added to inventory.. The Armor will show as broken, buy or collect and item to fix it")
tk.Button(armors_tab, text="Add Selected Armors", command=add_selected_armors).pack(padx=5, pady=2)
armor_text = """
The Armor will show as broken, buy or collect and item to fix it.
"""


goodss_label = tk.Label(armors_tab, text=armor_text, wraplength=400, justify="left", anchor="nw")
goodss_label.pack(padx=10, pady=10, fill="x") 
def add_all_armors():
    for name in armors_names:
        spawn_items(name, "armor")
    messagebox.showinfo("Info", "All Armors added to inventory. . The Armor will show as broken, buy or collect and item to fix it")
tk.Button(armors_tab, text="Add All Armors", command=add_all_armors).pack(padx=5, pady=2)

messagebox.showinfo("Info", "No idea what will get you banned. Use at your own risk.")


my_label = tk.Label(window, text="Made by Alfazari911 ", anchor="e", padx=10)
my_label.pack(side="top", anchor="ne", padx=10, pady=5)

window.mainloop()

